// src/ai/flows/generate-project-ideas.ts
'use server';

/**
 * @fileOverview Generates project ideas based on user-selected category, skill level, and hours.
 *
 * - generateProjectIdeas - A function that generates project ideas.
 * - GenerateProjectIdeasInput - The input type for the generateProjectIdeas function.
 * - GenerateProjectIdeasOutput - The return type for the generateProjectIdeas function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateProjectIdeasInputSchema = z.object({
  category: z
    .string()
    .describe("The category of project to generate ideas for (e.g., Startup, SaaS, Open Source, Realistic, Futuristic)."),
  skillLevel: z.string().describe('The skill level of the user (e.g., Beginner, Intermediate, Advanced).'),
  hours: z.number().describe('The number of hours the user can dedicate to the project per week.'),
});

export type GenerateProjectIdeasInput = z.infer<typeof GenerateProjectIdeasInputSchema>;

const IdeaSchema = z.object({
  idea: z.string().describe('A short, catchy title for the project idea.'),
  description: z.string().describe('A concise, one-sentence description of the project idea.'),
});

const GenerateProjectIdeasOutputSchema = z.object({
  ideas: z.array(IdeaSchema).describe('A list of 5 project ideas, each with a title and a short description.'),
});

// The final output will include images.
export type GeneratedIdea = { idea: string; description: string; image: string; };
export type GenerateProjectIdeasOutput = {
    ideas: GeneratedIdea[];
};

export async function generateProjectIdeas(input: GenerateProjectIdeasInput): Promise<GenerateProjectIdeasOutput> {
  return generateProjectIdeasFlow(input);
}

const generateIdeaPrompt = ai.definePrompt({
  name: 'generateIdeaPrompt',
  input: {schema: GenerateProjectIdeasInputSchema},
  output: {schema: GenerateProjectIdeasOutputSchema},
  prompt: `You are an AI assistant designed to generate creative and unique project ideas.

  Generate 5 distinct and innovative project ideas based on the following criteria:
  - Category: {{{category}}}
  - Skill Level: {{{skillLevel}}}
  - Weekly Hours Commitment: {{{hours}}} hours

  The ideas should focus on solving real-world problems. For each idea, provide a short title and a one-sentence description.`, 
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const generateProjectIdeasFlow = ai.defineFlow(
  {
    name: 'generateProjectIdeasFlow',
    inputSchema: GenerateProjectIdeasInputSchema,
    // Note: The flow's output schema differs from the final return type because we add images separately.
    outputSchema: z.any(),
  },
  async (input): Promise<GenerateProjectIdeasOutput> => {
    const {output} = await generateIdeaPrompt(input);

    if (!output || !output.ideas || output.ideas.length === 0) {
      throw new Error('No ideas were generated by the AI.');
    }

    const imageGenerationPromises = output.ideas.map(async (ideaItem) => {
      const imageDescription = `Generate an image that visually represents the following project idea: ${ideaItem.idea} - ${ideaItem.description}`;
      try {
        const {media} = await ai.generate({
          model: 'googleai/gemini-2.0-flash-preview-image-generation',
          prompt: imageDescription,
          config: {
            responseModalities: ['TEXT', 'IMAGE'],
          },
        });
        return {
          idea: ideaItem.idea,
          description: ideaItem.description,
          image: media?.url ?? 'https://placehold.co/600x400.png',
        };
      } catch (error) {
        console.error(`Image generation failed for idea: "${ideaItem.idea}"`, error);
        return {
            idea: ideaItem.idea,
            description: ideaItem.description,
            image: 'https://placehold.co/600x400.png'
        }
      }
    });
    
    const ideasWithImages = await Promise.all(imageGenerationPromises);

    return {
      ideas: ideasWithImages,
    };
  }
);
